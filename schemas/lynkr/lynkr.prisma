datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    Male
    Female
    Other

    @@map("gender_enum")
}

enum Lang {
    en
    fr

    @@map("lang_enum")
}

model Person {
    person_id      String    @id @default(uuid()) @db.VarChar(36)
    email          String    @unique @db.VarChar(50)
    first_name     String    @db.VarChar(50)
    last_name      String    @db.VarChar(50)
    phone_number   String?   @db.VarChar(25)
    address        String?   @db.Text
    birth_date     DateTime?
    preferred_lang Lang      @default(en)
    gender         Gender?
    created_at     DateTime  @default(now()) @db.DateTime(0)

    roles        Role[]
    logins       Login[]
    roleAudits   RoleAudit[]
    personAudits PersonAudit[]
}

model PersonAudit {
    person_audit_id String   @id @default(uuid()) @db.VarChar(36)
    email           String   @db.VarChar(50)
    phone_number    String?  @db.VarChar(25)
    address         String?  @db.Text
    gender          Gender?
    preferred_lang  Lang
    audited_at      DateTime @default(now()) @db.DateTime(0)
    person_id       String   @db.VarChar(36)
    person          Person   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
    role_id    String   @id @default(uuid()) @db.VarChar(36)
    role_name  String   @unique
    origin     String   @db.VarChar(45) ///admin.lynkr.net
    created_at DateTime @default(now()) @db.DateTime(0)
    created_by String?  @db.VarChar(36)
    person     Person?  @relation(fields: [created_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)

    logins     Login[]
    roleAudits RoleAudit[]
}

model RoleAudit {
    role_audit_id String   @id @default(uuid()) @db.VarChar(36)
    role_name     String
    audited_at    DateTime @default(now()) @db.DateTime(0)
    role_id       String   @db.VarChar(36)
    role          Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade)
    audited_by    String   @db.VarChar(36)
    person        Person   @relation(fields: [audited_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

model Login {
    login_id   String   @id @default(uuid()) @db.VarChar(36)
    password   String   @db.VarChar(75)
    is_active  Boolean  @default(true) @db.TinyInt
    role_id    String   @db.VarChar(36)
    role       Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade)
    created_at DateTime @default(now()) @db.DateTime(0)
    person_id  String   @db.VarChar(36)
    person     Person   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    created_by String?  @db.VarChar(36)
    admin      Login?   @relation(name: "created_by_admin", fields: [created_by], references: [login_id], onDelete: Cascade, onUpdate: Cascade)

    loginAudits         LoginAudit[]    @relation(name: "audited_login")
    createdLogins       Login[]         @relation(name: "created_by_admin")
    resetPasswords      ResetPassword[] @relation(name: "reset_login")
    adminResetPasswords ResetPassword[] @relation(name: "reset_by_admin")
    auditedLoginAudits  LoginAudit[]    @relation(name: "audited_by_admin")
}

model LoginAudit {
    login_audit_id String   @id @default(uuid()) @db.VarChar(36)
    password       String   @db.VarChar(75)
    is_active      Boolean  @db.TinyInt
    audited_at     DateTime @default(now()) @db.DateTime(0)
    login_id       String   @db.VarChar(36)
    login          Login    @relation(name: "audited_login", fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
    audited_by     String   @db.VarChar(36)
    admin          Login    @relation(name: "audited_by_admin", fields: [audited_by], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}

model ResetPassword {
    reset_password_id String    @id @default(uuid()) @db.VarChar(36)
    expires_at        DateTime  @db.DateTime(0)
    used_at           DateTime? @db.DateTime(0)
    created_at        DateTime  @default(now()) @db.DateTime(0)
    cancelled_at      DateTime? @db.DateTime(0)
    reset_by          String?   @db.VarChar(36)
    admin             Login?    @relation(name: "reset_by_admin", fields: [reset_by], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
    login_id          String    @db.VarChar(36)
    login             Login     @relation(name: "reset_login", fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}
