datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    Male
    Female

    @@map("gender__enum")
}

enum Lang {
    En
    Fr

    @@map("preferred_lang_enum")
}

model Person {
    person_id          String   @id @default(uuid()) @db.VarChar(36)
    fisrt_name         String   @db.VarChar(50)
    last_name          String   @db.VarChar(50)
    phone_number       String   @db.VarChar(15)
    birthdate          DateTime @db.DateTime(0)
    gender             Gender
    national_id_number String   @db.VarChar(15)
    address            String   @db.VarChar(20)
    longitude          Int
    latitude           Int
    email              String   @db.VarChar(50)
    preferred_lang     Lang
    image_ref          String   @db.VarChar(50)
    created_at         DateTime @default(now()) @db.DateTime(0)

    Schools      School[]
    PersonAudits PersonAudit[]
}

model PersonAudit {
    person_id          String   @id @default(uuid()) @db.VarChar(36)
    fisrt_name         String   @db.VarChar(50)
    last_name          String   @db.VarChar(50)
    phone_number       String   @db.VarChar(15)
    birthdate          DateTime @db.DateTime(0)
    gender             Gender
    national_id_number String   @db.VarChar(15)
    address            String   @db.VarChar(20)
    longitude          Int
    latitude           Int
    email              String   @db.VarChar(50)
    preferred_lang     Lang
    image_ref          String   @db.VarChar(50)
    audited_at         DateTime @default(now()) @db.DateTime(0)
    audited_by         String   @db.VarChar(36)
    Person             Person   @relation(fields: [audited_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

model School {
    school_id              String   @id @default(uuid()) @db.VarChar(36)
    address                String   @db.VarChar(20)
    longitude              Int
    latitude               Int
    email                  String   @db.VarChar(50)
    phone_number           String   @db.VarChar(15)
    description            String   @db.Text
    logo_ref               String   @db.Text
    creation_decree_number String   @db.VarChar(45)
    is_validated           Boolean  @default(false) @db.TinyInt
    is_deleted             Boolean  @default(false) @db.TinyInt
    created_at             DateTime @default(now()) @db.DateTime(0)
    demanded_by            String   @db.VarChar(36)
    Person                 Person   @relation(fields: [demanded_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)

    Logins        Login[]
    SchoolDemands SchoolDemand[]
}

model SchoolDemand {
    school_demand_id String   @id @default(uuid()) @db.VarChar(36)
    demanded_at      DateTime @default(now()) @db.DateTime(0)
    responsed_at     DateTime @db.DateTime(0)
    rejection_reason String   @db.Text
    school_id        String
    School           School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)

    validated_by String @db.VarChar(36)
    Login        Login  @relation(fields: [validated_by], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}

enum AcademicYearStatus {
    INACTIVE
    ACTIVE
    FIINISHED

    @@map("academic_year_status_enum")
}

model AcademicYear {
    academic_year_id   String              @id @default(uuid()) @db.VarChar(36)
    starts_at          DateTime            @db.DateTime(0)
    ends_at            DateTime            @db.DateTime(0)
    started_at         DateTime?           @db.DateTime(0)
    ended_at           DateTime?           @db.DateTime(0)
    status             AcademicYearStatus
    code               String              @db.VarChar(36)
    is_deleted         Boolean             @default(false) @db.TinyInt
    created_at         DateTime            @db.DateTime(0)
    created_by         String?             @db.VarChar(36)
    AnnualConfigurator AnnualConfigurator? @relation(fields: [created_by], references: [annual_configurator_id], onDelete: Cascade, onUpdate: Cascade)

    AnnualConfigurators AnnualConfigurator[] @relation(name: "Configurator_AcademiqueYear")
    AnnualRegistries    AnnualRegistry[]
    AnnualTeachers      AnnualTeacher[]
}

model Login {
    login_id   String   @id @default(uuid()) @db.VarChar(36)
    password   String   @db.VarChar(75)
    cookie_age String   @db.VarChar(36)
    is_deleted Boolean  @default(false) @db.TinyInt()
    created_at DateTime @default(now()) @db.DateTime(0)
    school_id  String?  @db.VarChar(36)
    School     School?  @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)

    LoginAudits          LoginAudit[]
    ResetPasswords       ResetPassword[]
    AnnualConfigurators  AnnualConfigurator[]
    AdminResetPasswwords ResetPassword[]      @relation("Admin_Generated_ResetPassword")
    Logs                 Log[]
    Students             Student[]
    AnnualRegistries     AnnualRegistry[]
    SchoolDemand         SchoolDemand[]
}

model AnnualConfigurator {
    annual_configurator_id String       @id @default(uuid()) @db.VarChar(36)
    is_sudo                Boolean      @default(false) @db.TinyInt
    deleted_at             DateTime?    @db.DateTime(0)
    is_deleted             Boolean      @default(false) @db.TinyInt
    login_id               String       @db.VarChar(36)
    Login                  Login        @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
    acadeemic_year_id      String       @db.VarChar(36)
    AcademicYear           AcademicYear @relation(name: "Configurator_AcademiqueYear", fields: [acadeemic_year_id], references: [academic_year_id], onDelete: Cascade, onUpdate: Cascade)

    AcademicYears    AcademicYear[]
    ResetPasswords   ResetPassword[]
    AnnualRegistries AnnualRegistry[]
    AnnualTeachers   AnnualTeacher[]
}

model LoginAudit {
    login_audit_id String   @id @default(uuid()) @db.VarChar(36)
    password       String   @db.VarChar(75)
    is_deleted     Boolean  @default(false) @db.TinyInt()
    audited_at     DateTime @default(now()) @db.DateTime(0)
    login_id       String   @db.VarChar(36)
    Login          Login    @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}

model Student {
    student_id   String @id @default(uuid()) @db.VarChar(36)
    matricule    String @db.VarChar(45)
    classroom_id String //classroom not yet available
    login_id     String @db.VarChar(36)
    Login        Login  @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)

    AnnualStudents AnnualStudent[]
}

model AnnualStudent {
    annual_student_id String  @id @default(uuid()) @db.VarChar(36)
    student_id        String
    Student           Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: Cascade)
}

model AnnualRegistry {
    annual_registry_id String             @id @default(uuid()) @db.VarChar(36)
    academiic_year_id  String
    AcademicYear       AcademicYear       @relation(fields: [academiic_year_id], references: [academic_year_id], onDelete: Cascade, onUpdate: Cascade)
    added_by           String
    AnnualConfigurator AnnualConfigurator @relation(fields: [added_by], references: [annual_configurator_id], onDelete: Cascade, onUpdate: Cascade)
    login_id           String
    Login              Login              @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}

model AnnualTeacher {
    annual_teacher_id     String             @id @default(uuid()) @db.VarChar(36)
    hourly_rate           Int
    origin_institute      String             @db.VarChar(45)
    has_signed_convention Boolean            @default(false) @db.TinyInt
    is_deleted            Boolean            @default(false) @db.TinyInt
    created_at            DateTime           @default(now()) @db.DateTime(0)
    academiic_year_id     String
    AcademicYear          AcademicYear       @relation(fields: [academiic_year_id], references: [academic_year_id], onDelete: Cascade, onUpdate: Cascade)
    teacher_id            String //teacher model not yet avaible
    created_by            String             @db.VarChar(36)
    AnnualConfigurator    AnnualConfigurator @relation(fields: [created_by], references: [annual_configurator_id], onDelete: Cascade, onUpdate: Cascade)
}

enum AuthMethod {
    MANUAL
    GOOGLE

    @@map("auth_method_enum")
}

model Log {
    log_id        String     @id @default(uuid()) @db.VarChar(36)
    auth_method   AuthMethod
    logged_in_at  DateTime   @default(now()) @db.DateTime(0)
    logged_out_at DateTime   @default(now()) @db.DateTime(0)
    closed_at     DateTime   @default(now()) @db.DateTime(0)
    login_id      String
    Login         Login      @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}

model ResetPassword {
    reset_password_id          String              @id @default(uuid()) @db.VarChar(36)
    reset_link                 String              @db.VarChar(45)
    expires_at                 DateTime?           @db.DateTime(0)
    is_valid                   Boolean             @default(false) @db.TinyInt
    login_id                   String              @db.VarChar(36)
    Login                      Login               @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
    generated_by_confiigurator String?             @db.VarChar(36)
    AnnualConfigurator         AnnualConfigurator? @relation(fields: [generated_by_confiigurator], references: [annual_configurator_id], onDelete: Cascade, onUpdate: Cascade)
    generated_by_admin         String?             @db.VarChar(36)
    Admin                      Login?              @relation("Admin_Generated_ResetPassword", fields: [generated_by_admin], references: [login_id], onDelete: Cascade, onUpdate: Cascade)
}
