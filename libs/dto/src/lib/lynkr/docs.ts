/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_getData"];
  };
  "/auth/sign-in": {
    /** Sign in to authenticate a user */
    post: operations["GlomAuthController_signIn"];
  };
  "/auth/sign-up": {
    /** Create a new user */
    post: operations["GlomAuthController_signUp"];
  };
  "/auth/reset-password": {
    /** Request a reset password id for reset link */
    post: operations["GlomAuthController_resetPassword"];
  };
  "/auth/new-password": {
    /** Set new password with the  previously requested `reset_password_id` */
    post: operations["GlomAuthController_setNewPassword"];
  };
  "/auth/reset-password/{reset_password_id}/cancel": {
    /** Cancel a request password request */
    patch: operations["GlomAuthController_cancelResetPasswordRequest"];
  };
  "/auth/log-out": {
    delete: operations["GlomAuthController_logOut"];
  };
  "/auth/google": {
    /** Google authentication. It redirects the provided callback on sucessfully authentication. */
    get: operations["GoogleController_googleAuth"];
  };
  "/auth/facebook": {
    /** Facebook authentication. It redirects the provided callback on sucessfully authentication. */
    get: operations["FacebookController_facebookAuth"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SignInDto: {
      /** @description Valid user email */
      email: string;
      /** @description Strong password */
      password: string;
    };
    UserEntity: {
      /** @description Valid user email */
      email: string;
      /** @description User first name */
      first_name: string;
      /** @description User last name */
      last_name: string;
      /**
       * @description User preffered language.
       * @default en
       * @enum {string}
       */
      preferred_lang: "en" | "fr";
      /** @description Valid user phone number */
      phone_number?: string;
      /**
       * Format: date-time
       * @description User date of birth
       */
      birth_date?: string;
      /**
       * @description User gender
       * @example Male
       * @enum {string}
       */
      gender?: "Male" | "Female" | "Other";
      /** @description Valid user address */
      address?: string;
      /**
       * @description User role. The default role is `Client`. Each role gives direct access to a particular origin(allow subdomains).
       * @example ba18ace9-c3d2-433f-8d95-aff8739eb7ff
       */
      role_id: string;
      /**
       * @description User login id
       * @example a835761e-63c4-44b8-85ec-e249c6826135
       */
      login_id: string;
      /**
       * @description User person id
       * @example c8840590-e171-40a7-8d2c-0815c64a70df
       */
      person_id: string;
      /**
       * Format: date-time
       * @description Account creation datetime.
       * @example "2023-10-11T01:23:45.412Z"
       */
      created_at: string;
    };
    SignUpDto: {
      /** @description Valid user email */
      email: string;
      /** @description Strong password */
      password: string;
      /** @description User first name */
      first_name: string;
      /** @description User last name */
      last_name: string;
      /** @enum {string} */
      preferred_lang: "en" | "fr";
      /** @description Valid user phone number */
      phone_number?: string;
      /**
       * Format: date-time
       * @description User date of birth
       */
      birth_date?: string;
      /**
       * @description User gender
       * @example Male
       * @enum {string}
       */
      gender?: "Male" | "Female" | "Other";
      /** @description Valid user address */
      address?: string;
    };
    ResetPasswordEmail: {
      /** @description Valid user email */
      email: string;
    };
    ResetPasswordDto: {
      /** @description Reset password id return from `/reset-password` */
      reset_password_id: string;
      /** @description New password. It must be a strong password */
      new_password: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getData: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Sign in to authenticate a user */
  GlomAuthController_signIn: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Unauthorized request. incorrect email or password */
      401: {
        content: never;
      };
      /** @description Precondition failed, user account must be activated before signing in. */
      412: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Create a new user */
  GlomAuthController_signUp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Conflict, user email is already registered with another account. */
      409: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Request a reset password id for reset link */
  GlomAuthController_resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordEmail"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Set new password with the  previously requested `reset_password_id` */
  GlomAuthController_setNewPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Cancel a request password request */
  GlomAuthController_cancelResetPasswordRequest: {
    parameters: {
      path: {
        reset_password_id: string;
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  GlomAuthController_logOut: {
    responses: {
      200: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Google authentication. It redirects the provided callback on sucessfully authentication. */
  GoogleController_googleAuth: {
    responses: {
      200: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Unauthorized request. incorrect email or password */
      401: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
  /** Facebook authentication. It redirects the provided callback on sucessfully authentication. */
  FacebookController_facebookAuth: {
    responses: {
      200: {
        content: never;
      };
      /** @description Bad request. This often happens when the request payload it not respected. */
      400: {
        content: never;
      };
      /** @description Unauthorized request. incorrect email or password */
      401: {
        content: never;
      };
      /** @description Internal server error. An unexpected exception was thrown */
      500: {
        content: never;
      };
    };
  };
}
